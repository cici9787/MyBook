全双工通信, client and server 实时、双向传输。
一、应用场景有哪些？
1.实时聊天应用
场景描述：在微信、QQ 等即时通讯软件中，WebSocket server 起着关键作用。用户在聊天时，发送的文字、图片、语音等消息都需要实时传递给对方。
工作原理：当用户 A 发送一条消息给用户 B 时，用户 A 的客户端通过 WebSocket 连接将消息发送到服务器，WebSocket server 接收到消息后，
会立即将消息推送给用户 B 的客户端，实现消息的实时传递。由于 WebSocket 的持久连接特性，双方可以在聊天过程中随时发送和接收消息，
无需频繁建立和断开连接，保证了聊天的流畅性和实时性。
2.在线游戏
场景描述：在多人在线游戏中，如英雄联盟、王者荣耀等，玩家之间的实时互动和游戏状态的实时更新至关重要。
工作原理：玩家在操作游戏角色时，客户端会通过 WebSocket 将玩家的操作信息（如移动、攻击等）发送到服务器。
WebSocket server 接收到这些信息后，会根据游戏逻辑更新游戏状态，并将最新的游戏状态（如其他玩家的位置、技能释放等信息）
推送给所有参与游戏的玩家客户端。通过 WebSocket 的高效双向通信，游戏能够实现实时的多人互动，为玩家提供流畅的游戏体验。
3.实时数据监控
场景描述：在工业生产监控、金融市场行情监控等领域，需要实时获取和展示数据的变化。
工作原理：以金融市场行情监控为例，数据采集系统会实时收集股票、期货等金融产品的价格、成交量等数据，并将这些数据发送给 WebSocket server。
WebSocket server 再将实时数据推送给客户端，如交易员使用的行情软件。客户端接收到数据后，会实时更新界面上的图表和数据显示，让交易员能够及时了解市场动态，
做出决策。
4.视频会议
场景描述：在疫情期间，视频会议软件如腾讯会议、Zoom 等得到了广泛应用。在视频会议中，参会者需要实时看到和听到其他参会者的视频和音频，
同时还能进行文字聊天和共享屏幕等操作。
工作原理：参会者的客户端通过 WebSocket 将自己的视频流、音频流和操作指令等发送到服务器，WebSocket server 负责将这些数据进行处理和转发，
将每个参会者的视频流和音频流推送给其他参会者的客户端，实现实时的视频和音频通信。同时，文字聊天消息和共享屏幕等操作也通过 WebSocket 进行实时传输和同步，
保证了视频会议的高效进行。

二、websocket与Http之间区别：
与HTTP之间区别
WebSocket 和 HTTP 都是网络通信协议，在网络应用中起着重要作用，但它们在连接方式、数据传输模式、应用场景等方面存在诸多区别，具体如下：
连接性质
HTTP：是一种无状态的请求 - 响应协议，客户端向服务器发送请求，服务器响应请求后连接即结束，服务器不会在不同请求之间记住客户端的状态信息。比如在浏览器中访问一个网页，每点击一次链接或刷新页面都是一次新的请求，服务器只处理当前请求，不关心之前或之后的请求情况。
WebSocket：在客户端和服务器之间建立的是持久连接，连接一旦建立，双方可以在任意时刻相互发送数据，持续进行双向通信，适用于需要实时交互的场景。
数据传输模式
HTTP：通常是客户端发起请求，服务器被动响应，数据只能从客户端到服务器，再由服务器返回给客户端这样单向流动。如果客户端想要获取最新数据，需要再次发送请求。
WebSocket：支持全双工通信，数据可以在客户端和服务器之间双向实时传输，服务器能够主动向客户端推送数据，无需客户端事先发起请求，双方可以随时主动发送消息。
数据格式
HTTP：数据格式较为灵活，常见的有 JSON、XML、HTML 等，一般以文本形式为主，也可传输二进制数据，如图片、视频等，但需要在请求和响应头中指定相应的 MIME 类型来标识数据格式。
WebSocket：数据以帧为单位进行传输，既可以发送文本数据，也可以发送二进制数据，应用程序可以根据自身需求灵活定义数据格式和内容。
连接建立方式
HTTP：客户端向服务器发送请求，服务器根据请求返回相应的状态码和数据，请求和响应的报文中包含了大量的元信息，如请求方法、URL、头部字段等，用于描述请求和响应的内容及相关信息。
WebSocket：在建立连接时，需要客户端发送一个特殊的 HTTP 请求进行握手，服务器响应确认后，将 HTTP 连接升级为 WebSocket 连接，此后的数据传输就不再遵循 HTTP 协议的格式。
应用场景
HTTP：适用于获取静态资源，如网页、文件下载等，以及进行数据查询、表单提交等非实时性的操作，大多数传统的 Web 应用在获取和展示数据时都依赖 HTTP 协议。
WebSocket：常用于实时性要求高的场景，如在线聊天、实时游戏、股票行情实时推送、视频会议等，能够提供高效、低延迟的实时数据交互体验。

三、什么业务场景用websocket? 什么业务场景用HTTP？
一般来说，实时性、交互性要求高的业务场景会使用 WebSocket，而对实时性要求不高、以获取和展示数据为主的业务场景则更多使用 HTTP。以下是具体说明：
适合使用 WebSocket 的业务场景
实时金融交易平台：
    在证券、期货等金融交易场景中，投资者需要实时获取股票、期货等金融产品的价格变动、交易行情等信息，同时可能需要实时下达交易指令。
    WebSocket 能实现服务器对行情数据的实时推送以及与客户端的快速指令交互，确保投资者及时获取市场动态并进行交易操作。
协同办公软件：
    如多人在线文档编辑、项目管理工具等，多个用户可能同时对一个文档或项目进行编辑和更新。使用 WebSocket 可以实时将每个用户的操作同步到其他用户的界面上，
    让大家能够实时看到彼此的修改，实现高效的协同工作。
物联网（IoT）数据监控与管理：
    在智能家居、工业物联网等领域，大量的设备需要将实时数据发送到服务器，同时服务器也需要实时向设备发送控制指令。
    例如，智能家居系统中，传感器将温度、湿度、光照等环境数据实时上传到服务器，用户通过手机客户端可以实时控制家电设备的开关、调节参数等，
    WebSocket 能够满足这种设备与服务器之间的实时双向数据通信需求。
直播互动：
    在直播过程中，观众发送的弹幕、点赞、送礼物等互动消息需要实时显示在直播间，主播也能实时看到观众的互动信息并做出回应。
    WebSocket 可以实现直播间内观众与主播之间以及观众与观众之间的实时互动，增强直播的趣味性和参与感。
适合使用 HTTP 的业务场景
网页浏览与内容展示：
    用户访问新闻网站、博客、企业官网等，主要是获取静态的文字、图片、视频等内容。
    HTTP 协议能够很好地满足客户端向服务器请求获取这些资源并进行展示的需求，
    服务器根据客户端的请求将相应的网页内容以 HTML、CSS、JavaScript 等格式返回给客户端，客户端进行渲染展示。
文件下载与上传：
    当用户从网站上下载软件、文档、图片等文件，或者向服务器上传文件时，通常使用 HTTP 协议。
    HTTP 支持不同类型文件的传输，并且可以通过设置合适的请求头和响应头来处理文件的大小、格式等问题。
数据查询与表单提交：
    在电商网站中查询商品信息、在搜索引擎中查找资料等操作，都是客户端向服务器发送查询请求，服务器根据请求返回相应的数据结果。
    此外，用户在注册、登录、提交订单等场景中填写表单，也是通过 HTTP 将表单数据发送到服务器进行处理，服务器返回操作结果。
API 数据获取：
    许多应用程序需要从后端服务器获取数据来填充界面或进行业务逻辑处理，比如手机应用从服务器获取用户信息、商品列表等数据。
    通过 HTTP 调用后端的 API 接口来获取数据是一种常见的方式，服务器以 JSON、XML 等格式返回数据，客户端进行解析和处理。



